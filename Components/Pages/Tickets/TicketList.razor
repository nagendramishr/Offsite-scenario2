@page "/tickets"
@using off2.Data
@using off2.Data.Enums
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject TicketService TicketService
@inject NavigationManager NavigationManager

<PageTitle>My Tickets</PageTitle>

<h1>My Tickets</h1>

<div class="row mb-4">
    <div class="col">
        <a href="tickets/create" class="btn btn-primary">Create New Ticket</a>
    </div>
</div>

@if (tickets == null)
{
    <p>Loading...</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Status</th>
                    <th>Priority</th>
                    <th>Category</th>
                    <th>Created</th>
                    <th>Assigned To</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ticket in tickets)
                {
                    <tr>
                        <td>@ticket.Id</td>
                        <td>@ticket.Title</td>
                        <td><span class="badge bg-@GetStatusColor(ticket.Status)">@ticket.Status</span></td>
                        <td><span class="badge bg-@GetPriorityColor(ticket.Priority)">@ticket.Priority</span></td>
                        <td>@ticket.Category</td>
                        <td>@ticket.CreatedAt.ToLocalTime().ToString("g")</td>
                        <td>@(ticket.AssignedTo?.UserName ?? "-")</td>
                        <td>
                            <a href="@($"tickets/{ticket.Id}")" class="btn btn-sm btn-primary">View</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Ticket>? tickets;

    protected override async Task OnInitializedAsync()
    {
        tickets = await TicketService.GetTicketsAsync();
    }

    private string GetStatusColor(TicketStatus status) => status switch
    {
        TicketStatus.Open => "primary",
        TicketStatus.InProgress => "info",
        TicketStatus.OnHold => "warning",
        TicketStatus.Resolved => "success",
        TicketStatus.Closed => "secondary",
        _ => "light"
    };

    private string GetPriorityColor(TicketPriority priority) => priority switch
    {
        TicketPriority.Critical => "danger",
        TicketPriority.High => "warning",
        TicketPriority.Medium => "info",
        TicketPriority.Low => "success",
        _ => "light"
    };
}

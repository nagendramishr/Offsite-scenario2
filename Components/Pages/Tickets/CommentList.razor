@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.ComponentModel.DataAnnotations
@using off2.Data
@using off2.Data.Models
@using off2.Data.Enums

@inject CommentService CommentService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<div class="comments-section mb-4">
    <h3>Comments</h3>
    @if (comments == null)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        @foreach (var comment in comments)
        {
            <div class="card mb-2 @(comment.CreatedById == currentUserId ? "border-primary" : "")">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-subtitle mb-2 text-muted">
                                @comment.CreatedBy?.UserName
                                <small>
                                    - @comment.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                                    @if (comment.IsEdited)
                                    {
                                        <span>(edited @comment.LastModifiedAt?.ToString("MMM dd, yyyy HH:mm"))</span>
                                    }
                                </small>
                            </h6>
                        </div>
                        @if (comment.CreatedById == currentUserId)
                        {
                            <div>
                                <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => StartEdit(comment)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteComment(comment.Id)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        }
                    </div>
                    @if (editingCommentId == comment.Id)
                    {
                        <div class="mt-2">
                            <EditForm Model="@editModel" OnValidSubmit="@SaveEdit">
                                <DataAnnotationsValidator />
                                <div class="form-group">
                                    <InputTextArea class="form-control" @bind-Value="editModel.Content" />
                                    <ValidationMessage For="@(() => editModel.Content)" />
                                </div>
                                <div class="mt-2">
                                    <button type="submit" class="btn btn-primary btn-sm">Save</button>
                                    <button type="button" class="btn btn-secondary btn-sm ms-2" @onclick="CancelEdit">Cancel</button>
                                </div>
                            </EditForm>
                        </div>
                    }
                    else
                    {
                        <p class="card-text">@comment.Content</p>
                    }
                </div>
            </div>
        }

        <div class="mt-3">
            <EditForm Model="@newCommentModel" OnValidSubmit="@AddComment">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <InputTextArea class="form-control" placeholder="Add a comment..." @bind-Value="newCommentModel.Content" />
                    <ValidationMessage For="@(() => newCommentModel.Content)" />
                </div>
                <button type="submit" class="btn btn-primary mt-2">Add Comment</button>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public int TicketId { get; set; }

    private List<TicketComment>? comments;
    private string? currentUserId;
    private int? editingCommentId;
    private CommentModel editModel = new();
    private CommentModel newCommentModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        await LoadComments();
    }

    private async Task LoadComments()
    {
        comments = await CommentService.GetCommentsForTicket(TicketId);
        StateHasChanged();
    }

    private async Task AddComment()
    {
        if (currentUserId == null) return;

        await CommentService.AddComment(TicketId, newCommentModel.Content, currentUserId);
        newCommentModel = new CommentModel();
        await LoadComments();
    }

    private void StartEdit(TicketComment comment)
    {
        editingCommentId = comment.Id;
        editModel = new CommentModel { Content = comment.Content };
    }

    private void CancelEdit()
    {
        editingCommentId = null;
        editModel = new CommentModel();
    }

    private async Task SaveEdit()
    {
        if (editingCommentId == null || currentUserId == null) return;

        await CommentService.EditComment(editingCommentId.Value, editModel.Content, currentUserId);
        editingCommentId = null;
        editModel = new CommentModel();
        await LoadComments();
    }    private async Task DeleteComment(int commentId)
    {
        if (currentUserId == null) return;

        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?"))
            return;

        await CommentService.DeleteComment(commentId, currentUserId);
        await LoadComments();
    }
}

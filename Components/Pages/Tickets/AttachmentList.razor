@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using off2.Data
@using off2.Data.Models

@inject AttachmentService AttachmentService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="attachments-section mb-4">
    <h3>Attachments</h3>
    
    @* File Upload *@
    <InputFile OnChange="@HandleFileSelected" class="form-control" accept="@string.Join(",", FileUploadModel.AllowedExtensions)" />
    @if (!string.IsNullOrEmpty(uploadMessage))
    {
        <div class="alert @(uploadError ? "alert-danger" : "alert-info") mt-2">@uploadMessage</div>
    }

    @* Attachments List *@
    @if (attachments == null)
    {
        <div class="spinner-border mt-3" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else if (!attachments.Any())
    {
        <p class="text-muted mt-3">No attachments yet.</p>
    }
    else
    {
        <div class="mt-3">
            @foreach (var attachment in attachments)
            {
                <div class="card mb-2">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-0">@attachment.FileName</h6>
                                <small class="text-muted">
                                    @(GetFileSizeString(attachment.FileSize)) - 
                                    Uploaded by @attachment.UploadedBy?.UserName at 
                                    @attachment.UploadedAt.ToLocalTime().ToString("MMM dd, yyyy HH:mm")
                                </small>
                            </div>
                            <div>
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => DownloadFile(attachment.Id)">
                                    <i class="bi bi-download"></i> Download
                                </button>
                                @if (attachment.UploadedById == currentUserId)
                                {
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteAttachment(attachment.Id)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int TicketId { get; set; }

    private List<TicketAttachment>? attachments;
    private string? currentUserId;
    private string? uploadMessage;
    private bool uploadError;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        AttachmentService.AttachmentsChanged += HandleAttachmentsChanged;
        await LoadAttachments();
    }

    private async Task LoadAttachments()
    {
        attachments = await AttachmentService.GetAttachmentsForTicketAsync(TicketId);
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            if (currentUserId == null) return;

            var file = e.File;
            uploadMessage = $"Uploading {file.Name}...";
            uploadError = false;
            StateHasChanged();

            await AttachmentService.UploadFileAsync(TicketId, file, currentUserId);
            uploadMessage = $"File {file.Name} uploaded successfully!";
            await LoadAttachments();
        }
        catch (ArgumentException ex)
        {
            uploadMessage = ex.Message;
            uploadError = true;
        }
        catch (Exception)
        {
            uploadMessage = "An error occurred while uploading the file.";
            uploadError = true;
        }
    }

    private async Task DeleteAttachment(int attachmentId)
    {
        if (currentUserId == null) return;

        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this attachment?"))
            return;

        try
        {
            await AttachmentService.DeleteAttachmentAsync(attachmentId, currentUserId);
            await LoadAttachments();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting attachment: {ex.Message}");
        }
    }

    private async Task DownloadFile(int attachmentId)
    {
        var attachment = attachments?.FirstOrDefault(a => a.Id == attachmentId);
        if (attachment == null) return;

        // Generate a temporary download URL
        var downloadUrl = $"/api/attachments/{attachmentId}/download";
        await JSRuntime.InvokeVoidAsync("open", downloadUrl, "_blank");
    }

    private string GetFileSizeString(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }

    private void HandleAttachmentsChanged(int ticketId)
    {
        if (ticketId == TicketId)
        {
            InvokeAsync(LoadAttachments);
        }
    }

    public void Dispose()
    {
        AttachmentService.AttachmentsChanged -= HandleAttachmentsChanged;
    }
}

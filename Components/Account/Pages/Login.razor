@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using off2.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IConfiguration Configuration

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-lg-6">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.UserNameOrEmail" id="Input.UserNameOrEmail" class="form-control" autocomplete="username" aria-required="true" placeholder="Username or Email" />
                    <label for="Input.UserNameOrEmail" class="form-label">Username or Email</label>
                    <ValidationMessage For="() => Input.UserNameOrEmail" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="Input.Password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" /> Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            @if (!string.IsNullOrWhiteSpace(Configuration["Authentication:Microsoft:ClientId"]) && !string.IsNullOrWhiteSpace(Configuration["Authentication:Microsoft:ClientSecret"]))
            {
                <form class="d-inline" action="Account/PerformExternalLogin" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                    <button type="submit" class="btn btn-primary" name="provider" value="Microsoft">Microsoft</button>
                </form>
            }
            @if (!string.IsNullOrWhiteSpace(Configuration["Authentication:Google:ClientId"]) && !string.IsNullOrWhiteSpace(Configuration["Authentication:Google:ClientSecret"]))
            {
                <form class="d-inline" action="Account/PerformExternalLogin" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                    <button type="submit" class="btn btn-primary" name="provider" value="Google">Google</button>
                </form>
            }
            @if (string.IsNullOrWhiteSpace(Configuration["Authentication:Microsoft:ClientId"]) && string.IsNullOrWhiteSpace(Configuration["Authentication:Google:ClientId"]))
            {
                <div>
                    <p>
                        There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article about setting up this ASP.NET application to support logging in via external services</a>.
                    </p>
                </div>
            }
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // Remove debug logging for authentication state if present
        Logger.LogInformation("Login attempt for: {UserNameOrEmail}", Input.UserNameOrEmail);
        var user = await UserManager.FindByNameAsync(Input.UserNameOrEmail) ?? 
                  await UserManager.FindByEmailAsync(Input.UserNameOrEmail);

        if (user == null)
        {
            Logger.LogWarning("Login failed: user not found for {UserNameOrEmail}", Input.UserNameOrEmail);
            errorMessage = "Error: Invalid login attempt.";
            return;
        }

        Logger.LogInformation("User found: {UserName}, EmailConfirmed: {EmailConfirmed}, Lockout: {LockoutEnabled}, AccessFailedCount: {AccessFailedCount}", user.UserName, user.EmailConfirmed, user.LockoutEnabled, user.AccessFailedCount);

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(user.UserName!, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User {UserName} logged in successfully.", user.UserName);
            NavigationManager.NavigateTo(ReturnUrl ?? "/", forceLoad: true);
        }
        else if (result.RequiresTwoFactor)
        {
            Logger.LogWarning("User {UserName} requires two-factor authentication.", user.UserName);
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User {UserName} account locked out.", user.UserName);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Login failed for user {UserName}: Invalid password or not allowed.", user.UserName);
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Username or Email")]
        public string UserNameOrEmail { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
